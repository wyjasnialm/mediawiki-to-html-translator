//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Micha≈Ç/Documents/GitHub/mediawiki-antlr-jfik-web/mediawiki-antlr-web/Gen\Mediawiki.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace mediawiki_antlr_web.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MediawikiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ITALIC=17, 
		BOLD=18, BOLD_ITALIC=19, H1=20, H2=21, H3=22, H4=23, H5=24, H6=25, HRLINE=26, 
		CHARACTER=27, WHITESPACE=28, NL=29;
	public const int
		RULE_document = 0, RULE_line = 1, RULE_formatted = 2, RULE_unformatted = 3, 
		RULE_italic = 4, RULE_bold = 5, RULE_bold_italic = 6, RULE_heading = 7, 
		RULE_heading1 = 8, RULE_heading2 = 9, RULE_heading3 = 10, RULE_heading4 = 11, 
		RULE_heading5 = 12, RULE_heading6 = 13, RULE_horizontal_line = 14, RULE_list = 15, 
		RULE_unordered_list = 16, RULE_ordered_list = 17, RULE_unordered_list_item = 18, 
		RULE_ordered_list_item = 19, RULE_list_item_content = 20, RULE_paragraph = 21, 
		RULE_content = 22, RULE_link = 23, RULE_external_link = 24, RULE_internal_link = 25, 
		RULE_external_link_uri = 26, RULE_external_link_title = 27, RULE_internal_link_ref = 28, 
		RULE_internal_link_title = 29, RULE_image = 30, RULE_image_filename = 31, 
		RULE_image_caption = 32, RULE_table = 33, RULE_table_row_separator = 34, 
		RULE_table_row = 35, RULE_table_cell = 36, RULE_plaintext = 37;
	public static readonly string[] ruleNames = {
		"document", "line", "formatted", "unformatted", "italic", "bold", "bold_italic", 
		"heading", "heading1", "heading2", "heading3", "heading4", "heading5", 
		"heading6", "horizontal_line", "list", "unordered_list", "ordered_list", 
		"unordered_list_item", "ordered_list_item", "list_item_content", "paragraph", 
		"content", "link", "external_link", "internal_link", "external_link_uri", 
		"external_link_title", "internal_link_ref", "internal_link_title", "image", 
		"image_filename", "image_caption", "table", "table_row_separator", "table_row", 
		"table_cell", "plaintext"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'#'", "'['", "']'", "'[['", "'|'", "']]'", "'http'", "'https'", 
		"'://'", "'.'", "'[[File:'", "'{|'", "'|}'", "'|-'", "'||'", "''''", "'''''", 
		"'''''''", "'='", "'=='", "'==='", "'===='", "'====='", "'======'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ITALIC", "BOLD", "BOLD_ITALIC", "H1", "H2", 
		"H3", "H4", "H5", "H6", "HRLINE", "CHARACTER", "WHITESPACE", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mediawiki.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MediawikiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MediawikiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MediawikiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MediawikiParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MediawikiParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MediawikiParser.NL, i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			line();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 77;
				Match(NL);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__4) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << ITALIC) | (1L << BOLD) | (1L << BOLD_ITALIC) | (1L << H1) | (1L << H2) | (1L << H3) | (1L << H4) | (1L << H5) | (1L << H6) | (1L << HRLINE) | (1L << CHARACTER) | (1L << WHITESPACE))) != 0)) {
					{
					State = 78;
					line();
					}
				}

				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Horizontal_lineContext horizontal_line() {
			return GetRuleContext<Horizontal_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph() {
			return GetRuleContext<ParagraphContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImageContext image() {
			return GetRuleContext<ImageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HRLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				horizontal_line();
				}
				break;
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				list();
				}
				break;
			case H1:
			case H2:
			case H3:
			case H4:
			case H5:
			case H6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				heading();
				}
				break;
			case T__2:
			case T__4:
			case T__7:
			case T__8:
			case ITALIC:
			case BOLD:
			case BOLD_ITALIC:
			case CHARACTER:
			case WHITESPACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				paragraph();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				image();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 6);
				{
				State = 93;
				table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormattedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext italic() {
			return GetRuleContext<ItalicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext bold() {
			return GetRuleContext<BoldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bold_italicContext bold_italic() {
			return GetRuleContext<Bold_italicContext>(0);
		}
		public FormattedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatted; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormattedContext formatted() {
		FormattedContext _localctx = new FormattedContext(Context, State);
		EnterRule(_localctx, 4, RULE_formatted);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ITALIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				italic();
				}
				break;
			case BOLD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				bold();
				}
				break;
			case BOLD_ITALIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				bold_italic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnformattedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext[] plaintext() {
			return GetRuleContexts<PlaintextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext(int i) {
			return GetRuleContext<PlaintextContext>(i);
		}
		public UnformattedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unformatted; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnformatted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnformattedContext unformatted() {
		UnformattedContext _localctx = new UnformattedContext(Context, State);
		EnterRule(_localctx, 6, RULE_unformatted);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__2:
					case T__4:
					case T__7:
					case T__8:
						{
						State = 101;
						link();
						}
						break;
					case CHARACTER:
					case WHITESPACE:
						{
						State = 102;
						plaintext();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItalicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ITALIC() { return GetTokens(MediawikiParser.ITALIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITALIC(int i) {
			return GetToken(MediawikiParser.ITALIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnformattedContext unformatted() {
			return GetRuleContext<UnformattedContext>(0);
		}
		public ItalicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_italic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItalic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItalicContext italic() {
		ItalicContext _localctx = new ItalicContext(Context, State);
		EnterRule(_localctx, 8, RULE_italic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(ITALIC);
			State = 108;
			unformatted();
			State = 109;
			Match(ITALIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOLD() { return GetTokens(MediawikiParser.BOLD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD(int i) {
			return GetToken(MediawikiParser.BOLD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnformattedContext unformatted() {
			return GetRuleContext<UnformattedContext>(0);
		}
		public BoldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bold; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBold(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoldContext bold() {
		BoldContext _localctx = new BoldContext(Context, State);
		EnterRule(_localctx, 10, RULE_bold);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(BOLD);
			State = 112;
			unformatted();
			State = 113;
			Match(BOLD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bold_italicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOLD_ITALIC() { return GetTokens(MediawikiParser.BOLD_ITALIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD_ITALIC(int i) {
			return GetToken(MediawikiParser.BOLD_ITALIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnformattedContext unformatted() {
			return GetRuleContext<UnformattedContext>(0);
		}
		public Bold_italicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bold_italic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBold_italic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bold_italicContext bold_italic() {
		Bold_italicContext _localctx = new Bold_italicContext(Context, State);
		EnterRule(_localctx, 12, RULE_bold_italic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(BOLD_ITALIC);
			State = 116;
			unformatted();
			State = 117;
			Match(BOLD_ITALIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context heading1() {
			return GetRuleContext<Heading1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context heading2() {
			return GetRuleContext<Heading2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context heading3() {
			return GetRuleContext<Heading3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading4Context heading4() {
			return GetRuleContext<Heading4Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading5Context heading5() {
			return GetRuleContext<Heading5Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading6Context heading6() {
			return GetRuleContext<Heading6Context>(0);
		}
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(Context, State);
		EnterRule(_localctx, 14, RULE_heading);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case H1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				heading1();
				}
				break;
			case H2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				heading2();
				}
				break;
			case H3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				heading3();
				}
				break;
			case H4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				heading4();
				}
				break;
			case H5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				heading5();
				}
				break;
			case H6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 124;
				heading6();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H1() { return GetTokens(MediawikiParser.H1); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H1(int i) {
			return GetToken(MediawikiParser.H1, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Heading1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading1Context heading1() {
		Heading1Context _localctx = new Heading1Context(Context, State);
		EnterRule(_localctx, 16, RULE_heading1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(H1);
			State = 128;
			plaintext();
			State = 129;
			Match(H1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H2() { return GetTokens(MediawikiParser.H2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H2(int i) {
			return GetToken(MediawikiParser.H2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Heading2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading2Context heading2() {
		Heading2Context _localctx = new Heading2Context(Context, State);
		EnterRule(_localctx, 18, RULE_heading2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(H2);
			State = 132;
			plaintext();
			State = 133;
			Match(H2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H3() { return GetTokens(MediawikiParser.H3); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H3(int i) {
			return GetToken(MediawikiParser.H3, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Heading3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading3Context heading3() {
		Heading3Context _localctx = new Heading3Context(Context, State);
		EnterRule(_localctx, 20, RULE_heading3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(H3);
			State = 136;
			plaintext();
			State = 137;
			Match(H3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H4() { return GetTokens(MediawikiParser.H4); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H4(int i) {
			return GetToken(MediawikiParser.H4, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Heading4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading4Context heading4() {
		Heading4Context _localctx = new Heading4Context(Context, State);
		EnterRule(_localctx, 22, RULE_heading4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(H4);
			State = 140;
			plaintext();
			State = 141;
			Match(H4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading5Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H5() { return GetTokens(MediawikiParser.H5); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H5(int i) {
			return GetToken(MediawikiParser.H5, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Heading5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading5; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading5(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading5Context heading5() {
		Heading5Context _localctx = new Heading5Context(Context, State);
		EnterRule(_localctx, 24, RULE_heading5);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(H5);
			State = 144;
			plaintext();
			State = 145;
			Match(H5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading6Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H6() { return GetTokens(MediawikiParser.H6); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H6(int i) {
			return GetToken(MediawikiParser.H6, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Heading6Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading6; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading6(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading6Context heading6() {
		Heading6Context _localctx = new Heading6Context(Context, State);
		EnterRule(_localctx, 26, RULE_heading6);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(H6);
			State = 148;
			plaintext();
			State = 149;
			Match(H6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Horizontal_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HRLINE() { return GetToken(MediawikiParser.HRLINE, 0); }
		public Horizontal_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontal_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontal_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Horizontal_lineContext horizontal_line() {
		Horizontal_lineContext _localctx = new Horizontal_lineContext(Context, State);
		EnterRule(_localctx, 28, RULE_horizontal_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(HRLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unordered_listContext unordered_list() {
			return GetRuleContext<Unordered_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordered_listContext ordered_list() {
			return GetRuleContext<Ordered_listContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 30, RULE_list);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				unordered_list();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				ordered_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unordered_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unordered_list_itemContext[] unordered_list_item() {
			return GetRuleContexts<Unordered_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unordered_list_itemContext unordered_list_item(int i) {
			return GetRuleContext<Unordered_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MediawikiParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MediawikiParser.NL, i);
		}
		public Unordered_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unordered_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnordered_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unordered_listContext unordered_list() {
		Unordered_listContext _localctx = new Unordered_listContext(Context, State);
		EnterRule(_localctx, 32, RULE_unordered_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 157;
					unordered_list_item();
					State = 158;
					Match(NL);
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 165;
			unordered_list_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordered_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ordered_list_itemContext[] ordered_list_item() {
			return GetRuleContexts<Ordered_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordered_list_itemContext ordered_list_item(int i) {
			return GetRuleContext<Ordered_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MediawikiParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MediawikiParser.NL, i);
		}
		public Ordered_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordered_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdered_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordered_listContext ordered_list() {
		Ordered_listContext _localctx = new Ordered_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_ordered_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 167;
					ordered_list_item();
					State = 168;
					Match(NL);
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 175;
			ordered_list_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unordered_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_item_contentContext list_item_content() {
			return GetRuleContext<List_item_contentContext>(0);
		}
		public Unordered_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unordered_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnordered_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unordered_list_itemContext unordered_list_item() {
		Unordered_list_itemContext _localctx = new Unordered_list_itemContext(Context, State);
		EnterRule(_localctx, 36, RULE_unordered_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T__0);
			State = 178;
			list_item_content();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordered_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_item_contentContext list_item_content() {
			return GetRuleContext<List_item_contentContext>(0);
		}
		public Ordered_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordered_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdered_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordered_list_itemContext ordered_list_item() {
		Ordered_list_itemContext _localctx = new Ordered_list_itemContext(Context, State);
		EnterRule(_localctx, 38, RULE_ordered_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__1);
			State = 181;
			list_item_content();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_item_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unordered_list_itemContext unordered_list_item() {
			return GetRuleContext<Unordered_list_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordered_list_itemContext ordered_list_item() {
			return GetRuleContext<Ordered_list_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public List_item_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_item_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_item_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_item_contentContext list_item_content() {
		List_item_contentContext _localctx = new List_item_contentContext(Context, State);
		EnterRule(_localctx, 40, RULE_list_item_content);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				unordered_list_item();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				ordered_list_item();
				}
				break;
			case T__2:
			case T__4:
			case T__7:
			case T__8:
			case ITALIC:
			case BOLD:
			case BOLD_ITALIC:
			case CHARACTER:
			case WHITESPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				content();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 42, RULE_paragraph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			content();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormattedContext[] formatted() {
			return GetRuleContexts<FormattedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormattedContext formatted(int i) {
			return GetRuleContext<FormattedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnformattedContext[] unformatted() {
			return GetRuleContexts<UnformattedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnformattedContext unformatted(int i) {
			return GetRuleContext<UnformattedContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 44, RULE_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 192;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ITALIC:
				case BOLD:
				case BOLD_ITALIC:
					{
					State = 190;
					formatted();
					}
					break;
				case T__2:
				case T__4:
				case T__7:
				case T__8:
				case CHARACTER:
				case WHITESPACE:
					{
					State = 191;
					unformatted();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__7) | (1L << T__8) | (1L << ITALIC) | (1L << BOLD) | (1L << BOLD_ITALIC) | (1L << CHARACTER) | (1L << WHITESPACE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_linkContext external_link() {
			return GetRuleContext<External_linkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_linkContext internal_link() {
			return GetRuleContext<Internal_linkContext>(0);
		}
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(Context, State);
		EnterRule(_localctx, 46, RULE_link);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				external_link();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				internal_link();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_linkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_link_uriContext external_link_uri() {
			return GetRuleContext<External_link_uriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(MediawikiParser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public External_link_titleContext external_link_title() {
			return GetRuleContext<External_link_titleContext>(0);
		}
		public External_linkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_link(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_linkContext external_link() {
		External_linkContext _localctx = new External_linkContext(Context, State);
		EnterRule(_localctx, 48, RULE_external_link);
		int _la;
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 200;
					Match(T__2);
					}
				}

				State = 203;
				external_link_uri();
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 204;
					Match(T__3);
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 207;
				Match(T__2);
				State = 208;
				external_link_uri();
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 209;
					Match(WHITESPACE);
					State = 210;
					external_link_title();
					}
				}

				State = 213;
				Match(T__3);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_linkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Internal_link_refContext internal_link_ref() {
			return GetRuleContext<Internal_link_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_link_titleContext internal_link_title() {
			return GetRuleContext<Internal_link_titleContext>(0);
		}
		public Internal_linkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternal_link(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Internal_linkContext internal_link() {
		Internal_linkContext _localctx = new Internal_linkContext(Context, State);
		EnterRule(_localctx, 50, RULE_internal_link);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(T__4);
			State = 218;
			internal_link_ref();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 219;
				Match(T__5);
				State = 220;
				internal_link_title();
				}
			}

			State = 223;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_link_uriContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHARACTER() { return GetTokens(MediawikiParser.CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER(int i) {
			return GetToken(MediawikiParser.CHARACTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] H1() { return GetTokens(MediawikiParser.H1); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode H1(int i) {
			return GetToken(MediawikiParser.H1, i);
		}
		public External_link_uriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_link_uri; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_link_uri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_link_uriContext external_link_uri() {
		External_link_uriContext _localctx = new External_link_uriContext(Context, State);
		EnterRule(_localctx, 52, RULE_external_link_uri);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 226;
			Match(T__9);
			State = 244;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 228;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 227;
							Match(CHARACTER);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 230;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 232;
						Match(T__10);
						}
						}
						State = 237;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==H1) {
						{
						{
						State = 238;
						Match(H1);
						}
						}
						State = 243;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_link_titleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public External_link_titleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_link_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_link_title(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_link_titleContext external_link_title() {
		External_link_titleContext _localctx = new External_link_titleContext(Context, State);
		EnterRule(_localctx, 54, RULE_external_link_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			plaintext();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_link_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Internal_link_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_link_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternal_link_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Internal_link_refContext internal_link_ref() {
		Internal_link_refContext _localctx = new Internal_link_refContext(Context, State);
		EnterRule(_localctx, 56, RULE_internal_link_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			plaintext();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_link_titleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Internal_link_titleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_link_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternal_link_title(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Internal_link_titleContext internal_link_title() {
		Internal_link_titleContext _localctx = new Internal_link_titleContext(Context, State);
		EnterRule(_localctx, 58, RULE_internal_link_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			plaintext();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Image_filenameContext image_filename() {
			return GetRuleContext<Image_filenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Image_captionContext image_caption() {
			return GetRuleContext<Image_captionContext>(0);
		}
		public ImageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImageContext image() {
		ImageContext _localctx = new ImageContext(Context, State);
		EnterRule(_localctx, 60, RULE_image);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(T__11);
			State = 255;
			image_filename();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 256;
				Match(T__5);
				State = 257;
				image_caption();
				}
			}

			State = 260;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Image_filenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext[] plaintext() {
			return GetRuleContexts<PlaintextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext(int i) {
			return GetRuleContext<PlaintextContext>(i);
		}
		public Image_filenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image_filename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImage_filename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Image_filenameContext image_filename() {
		Image_filenameContext _localctx = new Image_filenameContext(Context, State);
		EnterRule(_localctx, 62, RULE_image_filename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			plaintext();
			State = 263;
			Match(T__10);
			State = 264;
			plaintext();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Image_captionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaintextContext plaintext() {
			return GetRuleContext<PlaintextContext>(0);
		}
		public Image_captionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image_caption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImage_caption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Image_captionContext image_caption() {
		Image_captionContext _localctx = new Image_captionContext(Context, State);
		EnterRule(_localctx, 64, RULE_image_caption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			plaintext();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MediawikiParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MediawikiParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_rowContext[] table_row() {
			return GetRuleContexts<Table_rowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_rowContext table_row(int i) {
			return GetRuleContext<Table_rowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_row_separatorContext[] table_row_separator() {
			return GetRuleContexts<Table_row_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_row_separatorContext table_row_separator(int i) {
			return GetRuleContext<Table_row_separatorContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 66, RULE_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__12);
			State = 269;
			Match(NL);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 270;
				table_row_separator();
				State = 271;
				Match(NL);
				}
			}

			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 275;
					table_row();
					State = 276;
					Match(NL);
					State = 277;
					table_row_separator();
					State = 278;
					Match(NL);
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 285;
			table_row();
			State = 286;
			Match(NL);
			State = 287;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_row_separatorContext : ParserRuleContext {
		public Table_row_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_row_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_row_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_row_separatorContext table_row_separator() {
		Table_row_separatorContext _localctx = new Table_row_separatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_table_row_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_cellContext[] table_cell() {
			return GetRuleContexts<Table_cellContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_cellContext table_cell(int i) {
			return GetRuleContext<Table_cellContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MediawikiParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MediawikiParser.NL, i);
		}
		public Table_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_rowContext table_row() {
		Table_rowContext _localctx = new Table_rowContext(Context, State);
		EnterRule(_localctx, 70, RULE_table_row);
		int _la;
		try {
			int _alt;
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 291;
				Match(T__5);
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 292;
					Match(NL);
					}
				}

				State = 295;
				table_cell();
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 296;
					Match(T__15);
					State = 297;
					table_cell();
					}
					}
					State = 302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 303;
				Match(T__5);
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 304;
					Match(NL);
					}
				}

				State = 307;
				table_cell();
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 308;
						Match(NL);
						State = 309;
						Match(T__5);
						State = 311;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NL) {
							{
							State = 310;
							Match(NL);
							}
						}

						State = 313;
						table_cell();
						}
						} 
					}
					State = 318;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_cellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public Table_cellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_cell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_cell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_cellContext table_cell() {
		Table_cellContext _localctx = new Table_cellContext(Context, State);
		EnterRule(_localctx, 72, RULE_table_cell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaintextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHARACTER() { return GetTokens(MediawikiParser.CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER(int i) {
			return GetToken(MediawikiParser.CHARACTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(MediawikiParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(MediawikiParser.WHITESPACE, i);
		}
		public PlaintextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plaintext; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediawikiVisitor<TResult> typedVisitor = visitor as IMediawikiVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaintext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaintextContext plaintext() {
		PlaintextContext _localctx = new PlaintextContext(Context, State);
		EnterRule(_localctx, 74, RULE_plaintext);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 323;
					_la = TokenStream.LA(1);
					if ( !(_la==CHARACTER || _la==WHITESPACE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,29,329,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,1,0,3,0,80,8,0,5,0,82,8,0,10,0,12,0,85,9,0,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,95,8,1,1,2,1,2,1,2,3,2,100,8,2,1,3,
		1,3,4,3,104,8,3,11,3,12,3,105,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
		1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,126,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,13,1,14,1,14,1,15,1,15,3,15,156,8,15,1,16,1,16,1,16,5,16,161,
		8,16,10,16,12,16,164,9,16,1,16,1,16,1,17,1,17,1,17,5,17,171,8,17,10,17,
		12,17,174,9,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
		3,20,187,8,20,1,21,1,21,1,22,1,22,4,22,193,8,22,11,22,12,22,194,1,23,1,
		23,3,23,199,8,23,1,24,3,24,202,8,24,1,24,1,24,3,24,206,8,24,1,24,1,24,
		1,24,1,24,3,24,212,8,24,1,24,1,24,3,24,216,8,24,1,25,1,25,1,25,1,25,3,
		25,222,8,25,1,25,1,25,1,26,1,26,1,26,4,26,229,8,26,11,26,12,26,230,1,26,
		5,26,234,8,26,10,26,12,26,237,9,26,1,26,5,26,240,8,26,10,26,12,26,243,
		9,26,4,26,245,8,26,11,26,12,26,246,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
		1,30,1,30,1,30,3,30,259,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,
		33,1,33,1,33,1,33,1,33,3,33,274,8,33,1,33,1,33,1,33,1,33,1,33,5,33,281,
		8,33,10,33,12,33,284,9,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,3,35,
		294,8,35,1,35,1,35,1,35,5,35,299,8,35,10,35,12,35,302,9,35,1,35,1,35,3,
		35,306,8,35,1,35,1,35,1,35,1,35,3,35,312,8,35,1,35,5,35,315,8,35,10,35,
		12,35,318,9,35,3,35,320,8,35,1,36,1,36,1,37,4,37,325,8,37,11,37,12,37,
		326,1,37,0,0,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,0,2,1,0,8,9,1,0,
		27,28,333,0,76,1,0,0,0,2,94,1,0,0,0,4,99,1,0,0,0,6,103,1,0,0,0,8,107,1,
		0,0,0,10,111,1,0,0,0,12,115,1,0,0,0,14,125,1,0,0,0,16,127,1,0,0,0,18,131,
		1,0,0,0,20,135,1,0,0,0,22,139,1,0,0,0,24,143,1,0,0,0,26,147,1,0,0,0,28,
		151,1,0,0,0,30,155,1,0,0,0,32,162,1,0,0,0,34,172,1,0,0,0,36,177,1,0,0,
		0,38,180,1,0,0,0,40,186,1,0,0,0,42,188,1,0,0,0,44,192,1,0,0,0,46,198,1,
		0,0,0,48,215,1,0,0,0,50,217,1,0,0,0,52,225,1,0,0,0,54,248,1,0,0,0,56,250,
		1,0,0,0,58,252,1,0,0,0,60,254,1,0,0,0,62,262,1,0,0,0,64,266,1,0,0,0,66,
		268,1,0,0,0,68,289,1,0,0,0,70,319,1,0,0,0,72,321,1,0,0,0,74,324,1,0,0,
		0,76,83,3,2,1,0,77,79,5,29,0,0,78,80,3,2,1,0,79,78,1,0,0,0,79,80,1,0,0,
		0,80,82,1,0,0,0,81,77,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,
		0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,0,0,1,87,1,1,0,0,0,88,95,3,28,14,
		0,89,95,3,30,15,0,90,95,3,14,7,0,91,95,3,42,21,0,92,95,3,60,30,0,93,95,
		3,66,33,0,94,88,1,0,0,0,94,89,1,0,0,0,94,90,1,0,0,0,94,91,1,0,0,0,94,92,
		1,0,0,0,94,93,1,0,0,0,95,3,1,0,0,0,96,100,3,8,4,0,97,100,3,10,5,0,98,100,
		3,12,6,0,99,96,1,0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,5,1,0,0,0,101,104,
		3,46,23,0,102,104,3,74,37,0,103,101,1,0,0,0,103,102,1,0,0,0,104,105,1,
		0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,7,1,0,0,0,107,108,5,17,0,0,108,
		109,3,6,3,0,109,110,5,17,0,0,110,9,1,0,0,0,111,112,5,18,0,0,112,113,3,
		6,3,0,113,114,5,18,0,0,114,11,1,0,0,0,115,116,5,19,0,0,116,117,3,6,3,0,
		117,118,5,19,0,0,118,13,1,0,0,0,119,126,3,16,8,0,120,126,3,18,9,0,121,
		126,3,20,10,0,122,126,3,22,11,0,123,126,3,24,12,0,124,126,3,26,13,0,125,
		119,1,0,0,0,125,120,1,0,0,0,125,121,1,0,0,0,125,122,1,0,0,0,125,123,1,
		0,0,0,125,124,1,0,0,0,126,15,1,0,0,0,127,128,5,20,0,0,128,129,3,74,37,
		0,129,130,5,20,0,0,130,17,1,0,0,0,131,132,5,21,0,0,132,133,3,74,37,0,133,
		134,5,21,0,0,134,19,1,0,0,0,135,136,5,22,0,0,136,137,3,74,37,0,137,138,
		5,22,0,0,138,21,1,0,0,0,139,140,5,23,0,0,140,141,3,74,37,0,141,142,5,23,
		0,0,142,23,1,0,0,0,143,144,5,24,0,0,144,145,3,74,37,0,145,146,5,24,0,0,
		146,25,1,0,0,0,147,148,5,25,0,0,148,149,3,74,37,0,149,150,5,25,0,0,150,
		27,1,0,0,0,151,152,5,26,0,0,152,29,1,0,0,0,153,156,3,32,16,0,154,156,3,
		34,17,0,155,153,1,0,0,0,155,154,1,0,0,0,156,31,1,0,0,0,157,158,3,36,18,
		0,158,159,5,29,0,0,159,161,1,0,0,0,160,157,1,0,0,0,161,164,1,0,0,0,162,
		160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,166,3,
		36,18,0,166,33,1,0,0,0,167,168,3,38,19,0,168,169,5,29,0,0,169,171,1,0,
		0,0,170,167,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,
		175,1,0,0,0,174,172,1,0,0,0,175,176,3,38,19,0,176,35,1,0,0,0,177,178,5,
		1,0,0,178,179,3,40,20,0,179,37,1,0,0,0,180,181,5,2,0,0,181,182,3,40,20,
		0,182,39,1,0,0,0,183,187,3,36,18,0,184,187,3,38,19,0,185,187,3,44,22,0,
		186,183,1,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,41,1,0,0,0,188,189,
		3,44,22,0,189,43,1,0,0,0,190,193,3,4,2,0,191,193,3,6,3,0,192,190,1,0,0,
		0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,
		45,1,0,0,0,196,199,3,48,24,0,197,199,3,50,25,0,198,196,1,0,0,0,198,197,
		1,0,0,0,199,47,1,0,0,0,200,202,5,3,0,0,201,200,1,0,0,0,201,202,1,0,0,0,
		202,203,1,0,0,0,203,205,3,52,26,0,204,206,5,4,0,0,205,204,1,0,0,0,205,
		206,1,0,0,0,206,216,1,0,0,0,207,208,5,3,0,0,208,211,3,52,26,0,209,210,
		5,28,0,0,210,212,3,54,27,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,1,0,
		0,0,213,214,5,4,0,0,214,216,1,0,0,0,215,201,1,0,0,0,215,207,1,0,0,0,216,
		49,1,0,0,0,217,218,5,5,0,0,218,221,3,56,28,0,219,220,5,6,0,0,220,222,3,
		58,29,0,221,219,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,7,0,
		0,224,51,1,0,0,0,225,226,7,0,0,0,226,244,5,10,0,0,227,229,5,27,0,0,228,
		227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,235,1,
		0,0,0,232,234,5,11,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,
		235,236,1,0,0,0,236,241,1,0,0,0,237,235,1,0,0,0,238,240,5,20,0,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,245,1,0,0,
		0,243,241,1,0,0,0,244,228,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,
		247,1,0,0,0,247,53,1,0,0,0,248,249,3,74,37,0,249,55,1,0,0,0,250,251,3,
		74,37,0,251,57,1,0,0,0,252,253,3,74,37,0,253,59,1,0,0,0,254,255,5,12,0,
		0,255,258,3,62,31,0,256,257,5,6,0,0,257,259,3,64,32,0,258,256,1,0,0,0,
		258,259,1,0,0,0,259,260,1,0,0,0,260,261,5,7,0,0,261,61,1,0,0,0,262,263,
		3,74,37,0,263,264,5,11,0,0,264,265,3,74,37,0,265,63,1,0,0,0,266,267,3,
		74,37,0,267,65,1,0,0,0,268,269,5,13,0,0,269,273,5,29,0,0,270,271,3,68,
		34,0,271,272,5,29,0,0,272,274,1,0,0,0,273,270,1,0,0,0,273,274,1,0,0,0,
		274,282,1,0,0,0,275,276,3,70,35,0,276,277,5,29,0,0,277,278,3,68,34,0,278,
		279,5,29,0,0,279,281,1,0,0,0,280,275,1,0,0,0,281,284,1,0,0,0,282,280,1,
		0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,3,70,35,
		0,286,287,5,29,0,0,287,288,5,14,0,0,288,67,1,0,0,0,289,290,5,15,0,0,290,
		69,1,0,0,0,291,293,5,6,0,0,292,294,5,29,0,0,293,292,1,0,0,0,293,294,1,
		0,0,0,294,295,1,0,0,0,295,300,3,72,36,0,296,297,5,16,0,0,297,299,3,72,
		36,0,298,296,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,
		320,1,0,0,0,302,300,1,0,0,0,303,305,5,6,0,0,304,306,5,29,0,0,305,304,1,
		0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,316,3,72,36,0,308,309,5,29,0,
		0,309,311,5,6,0,0,310,312,5,29,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,
		313,1,0,0,0,313,315,3,72,36,0,314,308,1,0,0,0,315,318,1,0,0,0,316,314,
		1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,319,291,1,0,0,
		0,319,303,1,0,0,0,320,71,1,0,0,0,321,322,3,2,1,0,322,73,1,0,0,0,323,325,
		7,1,0,0,324,323,1,0,0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,
		0,327,75,1,0,0,0,33,79,83,94,99,103,105,125,155,162,172,186,192,194,198,
		201,205,211,215,221,230,235,241,246,258,273,282,293,300,305,311,316,319,
		326
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace mediawiki_antlr_web.Gen
